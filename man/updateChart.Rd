% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/lc.R
\name{updateChart}
\alias{updateChart}
\title{Update a chart}
\usage{
updateChart(id = NULL, layerId = NULL, updateType = NULL)
}
\arguments{
\item{id}{An ID of the cahrt to be updated (or vector of IDs). If NULL then all the
existing charts will be updated.}

\item{layerId}{An ID of the layer to be updated (or vector of IDs). If NULL of the
layers of the selected charts will be updated. To update only the selected layers of
multiple charts the lengths of \code{id} and \code{layerId} must be the same.}

\item{updateType}{To improve performance it may be useful to change only certain 
aspects of the chart (e.g. location of the points, colour of the heatmap cells,
etc.). This argument can specify which part of chart to update. Possible options are
\code{Elements}, \code{ElementPosition}, \code{ElementStyle}, \code{Axes}, \code{Labels},
\code{Cells}, \code{Texts}, \code{LabelPosition}, \code{CellPosition}, 
\code{TextPosition}, \code{LabelText}, \code{CellColour}, \code{TextValues},
\code{Canvas}, \code{Size}. See details for more information.}
}
\description{
\code{updateChart} redraws a chart or a single layer of the chart to make it up
to date with current state of the environment.
}
\details{
Linked charts of the \emph{rlc} package are based on the idea that variables
used to define the chart are not constant, but can change as a result of user's
actions. Each time the \code{updateChart} is called, all the properties passed
via \code{\link{dat}} function are reevaluated and cahrt is changed in accordance with the
new state.
}
\examples{
data(iris)

#store some properties in global variables
width <- 300
height <- 300
colour <- iris$Sepal.Width
#create a chart
lc_scatter(dat(x = iris$Sepal.Length, y = iris$Petal.Length, colourValue = colour,
               width = width, height = height), id = "iris")

#change the variables
height <- 400
colour <- iris$Petal.Width

#this will change colour of points and chart height
updateChart("iris")
#this will change only height
updateChart("iris", updateType = "Size")

#add another property
setProperties(dat(symbolValue = iris$Species), "iris")
#this will change only colour and symbols
updateChart("iris", updateType = "ElementStyle")

}
