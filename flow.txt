User code calls lc_newpage to set up a new plot
- lc_newpage starts a web server
- lc_newpage stores the web server's handle in 'pageobj$httpuv_handle'
- lc_newpage directs the viewer/browser to the web server and to request 'init.html'
- browser requests 'init.html' from server
- server calls handle_http_request to handle the request
- handle_http_request reads init.html from html_root and returns it (together with status
  200) for serving to browser
- code in init.html directs browser to request dependencies, as well as rlc.js
- server serves these from html_root
- rlc.js contacts server to open a WebSocket connection
- server handles this by calling handle_websocket_open
- handle_websocket_open registers an anonymous function to handle incoming
  WebSocket messages
- body of init.html adds a blank table with id-labelled cells to take up the plots

User code adds a chart by calling, e.g., lc_scatterchart
- the user code provides a data function ("data_fun"), the ID of an
  HTML node to take the chart ("place"), an ID for the chart ("id",
  by default equal to 'place') and an "on_click" function (by default empty)
- lc_scatterchart calls place_chart, passing a chart_type ("scatterChart") and
  the arguments supplied by the user code. The on_click function is wrapped into
  a general "callback" function, which will call on_click only if the event was a click.
- place_chart first checks that the ID is still free
- place_chart then adds the chart to the 'pageobj$charts' environment, as a named list
  of chart 'type', 'data_fun', and event 'callback'
- place_chart then sends via WS a NEWCHART message to the browser, with chart type, id
  and place (the latter as selector, i.e., with prefixed '#')
- place_chart finally calls 'lc_update'